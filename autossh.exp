#!/usr/bin/expect

# 1. autoscp.exp 把需要执行的脚本拷贝到远端的机器上。##
# 2. autossh.exp 在远端机器上执行命令或拷贝过去的脚本。##

if {$argc != 4} {
    send_error "usage: ./autossh.exp <username> <password> <remoteIp> <command>\n"
    exit 1
}

# 单位为秒，设置为0表示立即超时，-1则表示永不超时。默认为10s。##
set timeout -1

set username   [lindex $argv 0]
set password   [lindex $argv 1]
set remoteIp   [lindex $argv 2]
set command    [lindex $argv 3]

# 添加"====autossh.exp===="是为了把ssh的输出和命令的输出分开。##
spawn ssh $username@$remoteIp "echo ====autossh.exp==== && $command"

expect {
    "Name or service not known" {send_error "Host\[ $remoteIp \] could not be reached. Please check the network. Try with cmd \[ ssh $username@$remoteIp \].\n"; exit 255} # 网络不通。##
    "No route to host"          {send_error "Host\[ $remoteIp \] could not be reached. Please check the network. Try with cmd \[ ssh $username@$remoteIp \].\n"; exit 255} # 网络不通。##
    "Connection timed out"      {send_error "Host\[ $remoteIp \] could not be reached. Please check the network. Try with cmd \[ ssh $username@$remoteIp \].\n"; exit 255} # 网络不通。##
    "Connection refused"        {send_error "Host\[ $remoteIp \] could not be reached. Please check the network. Try with cmd \[ ssh $username@$remoteIp \].\n"; exit 255} # 网络不通。##
    "Permission denied"         {send_error "Username\[ $username \] or password\[ ****** \] is not correct. Try with cmd \[ ssh $username@$remoteIp \].\n"; exit 255}     # 密码错误。##
    "authentication failures"   {send_error "Username\[ $username \] or password\[ ****** \] is not correct. Try with cmd \[ ssh $username@$remoteIp \].\n"; exit 255}     # 密码错误。##
    "(yes/no)?"                 {send "yes\r"; exp_continue}                                                                                                               # 添加信任。##
    "*assword:"                 {send "$password\r"; exp_continue}                                                                                                         # 加exp_continue是为了在密码错误时，也要连续输入三次。##
    eof                                                                                                                                                                    # 进程结束发出eof，这个要匹配。##
}

# 获得ssh返回值。如果ssh连接失败，返回值为ssh命令本身的返回值255。如果ssh连接成功，返回值为执行命令的返回值。特别地，如果执行命令的返回值为255，那我们是区分不出是ssh出错还是执行命令出错的。不过一般执行命令的返回值都不为255，另外，我们也不应过度区分是哪个引起的错误，调用此脚本的脚本只要知道出错就好了。##
catch wait result
exit [lindex $result 3]
